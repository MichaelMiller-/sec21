#
# Copyright (c) 2012-2016 Krzysztof Jusiak (krzysztof at jusiak dot net)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
import testing ;
import modules ;
import feature : extend-feature compose ;

.argv = [ modules.peek : ARGV ] ;

extend-feature variant : coverage ;
compose <variant>coverage :
    <cxxflags>"-fprofile-arcs -ftest-coverage -DCOVERAGE" <linkflags>"-fprofile-arcs"
    <optimization>off
;

extend-feature variant : analyze ;
compose <variant>analyze :
    <toolset>gcc:<cxxflags>"-fsanitize=undefined,address" <toolset>gcc:<linkflags>"-fsanitize=undefined,address"
    <toolset>clang:<cxxflags>"-fsanitize=undefined,address" <toolset>clang:<linkflags>"-fsanitize=undefined,address"
    <toolset>darwin:<cxxflags>"-fsanitize=undefined,address" <toolset>darwin:<linkflags>"-fsanitize=undefined,address"
    <toolset>msvc:<cxxflags>"/analyze"
    <optimization>off
;

project boost.di :
    requirements
        <include>.
        <include>..
        <include>../include
;

rule test ( src + : property * : defines * : options * ) {
    toolset =
        <toolset>gcc:<cxxflags>"-std=c++1y -include common/test.hpp -fno-exceptions -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>gcc-6.0.0:<cxxflags>"-std=c++1z"
        <toolset>clang:<cxxflags>"-std=c++1y -include common/test.hpp -fno-exceptions -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>darwin:<cxxflags>"-std=c++1y -include common/test.hpp -fno-exceptions -pedantic -pedantic-errors -Wall -Wextra -Werror"
        <toolset>msvc:<cxxflags>"/FI common/test.hpp /W3 /D_CRT_SECURE_NO_WARNINGS"
    ;

    local memcheck = [ MATCH --memcheck=(.*) : $(.argv) ] ;

    if ${memcheck} && ! DISABLE_MEMCHECK in $(options) {
        toolset += <testing.launcher>$(memcheck) ;
    }

    run $(src) : : : $(toolset) <define>BOOST_DI_NAMESPACE= $(defines) : $(property) ;
}

test-suite ut :
    [ test ut/inject.cpp ]
    [ test ut/aux_/preprocessor.cpp ]
    [ test ut/aux_/type_traits.cpp ]
    [ test ut/aux_/utility.cpp ]
    [ test ut/concepts/boundable.cpp ]
    [ test ut/concepts/callable.cpp ]
    [ test ut/concepts/configurable.cpp ]
    [ test ut/concepts/creatable.cpp ]
    [ test ut/concepts/providable.cpp ]
    [ test ut/concepts/scopable.cpp ]
    [ test ut/core/any_type.cpp ]
    [ test ut/core/array.cpp ]
    [ test ut/core/binder.cpp ]
    [ test ut/core/bindings.cpp ]
    [ test ut/core/dependency.cpp ]
    [ test ut/core/injector.cpp ]
    [ test ut/core/policy.cpp ]
    [ test ut/core/pool.cpp ]
    [ test ut/core/provider.cpp ]
    [ test ut/core/wrapper.cpp ]
    [ test ut/policies/constructible.cpp ]
    [ test ut/providers/heap.cpp ]
    [ test ut/providers/stack_over_heap.cpp ]
    [ test ut/scopes/deduce.cpp ]
    [ test ut/scopes/instance.cpp ]
    [ test ut/scopes/singleton.cpp ]
    [ test ut/scopes/unique.cpp ]
    [ test ut/type_traits/ctor_traits.cpp ]
    [ test ut/type_traits/memory_traits.cpp ]
    [ test ut/type_traits/named_traits.cpp ]
    [ test ut/type_traits/rebind_traits.cpp ]
    [ test ut/type_traits/scope_traits.cpp ]
    [ test ut/wrappers/unique.cpp : unique_wrapper ]
    [ test ut/wrappers/shared.cpp : shared_wrapper ]
    [ test ut/bindings.cpp : bindings_cpp ]
    [ test ut/config.cpp ]
    [ test ut/injector.cpp : injector_cpp ]
    [ test ut/make_injector.cpp ]
;

test-suite ft :
    [ test ft/di_bind.cpp ]
    [ test ft/di_config.cpp ]
    [ test ft/di_config_global_policies.cpp ]
    [ test ft/di_config_global_provider.cpp ]
    [ test ft/di_errors.cpp : : : DISABLE_MEMCHECK ]
    [ test ft/di_inject.cpp ]
    [ test ft/di_injector.cpp ]
    [ test ft/di_no_memory_inc.cpp ]
    [ test ft/di_no_std_inc.cpp : : <define>BOOST_DI_TEST_HPP ] # -nostdinc, -nostdinc++
    [ test ft/di_module_1.cpp ft/di_module_2.cpp ft/di_module_3.cpp : : <define>BOOST_DI_TEST_HPP ]
;

test-suite pt :
    [ test pt/di_compile_time.cpp ]
    [ test pt/di_run_time.cpp : : <optimization>speed <variant>release ]
;

