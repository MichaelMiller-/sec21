find_package(Catch2 CONFIG REQUIRED)
find_package(Boost 1.70 REQUIRED)
find_package(fmt REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)

## Speed up the compile-time process
add_library(catch_main STATIC catch_main.cpp)
target_link_libraries(catch_main PUBLIC Catch2::Catch2 Catch2::Catch2WithMain)

include(CompilerWarnings)

function(test filename)
    set(test_project_name test.${filename})
    add_executable(${test_project_name})
    set_project_warnings(${test_project_name})

    target_sources(${test_project_name} PRIVATE ${filename}.cpp)

    target_link_libraries(${test_project_name} PRIVATE Boost::boost)
    target_link_libraries(${test_project_name} PRIVATE catch_main)
    target_link_libraries(${test_project_name} PRIVATE sec21::sec21)
    target_link_libraries(${test_project_name} PRIVATE fmt::fmt-header-only)
    target_link_libraries(${test_project_name} PRIVATE nlohmann_json nlohmann_json::nlohmann_json)

    add_test(
            NAME ${test_project_name}
            COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test_project_name})
endfunction()

## Unit tests via catch (alphabetical order)
test("all_of")
test("alphabet")
test("any_of")
test("arity")
test("bit_pattern")
test("blob")
test("concat")
test("database.column_type")
test("database.constraints")
test("database.query")
test("fixed_string")
test("for_each_adjacent")
test("for_each_chunk")
test("for_each_indexed")
test("memory")
test("literals.memory")
test("reflection.get_column")
test("scope_guard")
test("split_if")
test("strong_type")
test("transform")
test("transform_if")
test("to_array")
test("type_traits.contains")
test("type_traits.index_of")
test("type_traits.is_specialized")
test("type_traits.is_std_string")
test("type_traits.is_tuple")
test("units.dimension")
test("units.quantity")
test("units.ratio")
test("validate")
test("write_csv")
test("zip")
